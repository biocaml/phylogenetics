open Core
open Phylogenetics

let rec node_to_nhx ?(parent_branch) = function
  | Tree.Node n -> Newick_ast.{
      name = None ;
      tags = [] ;
      parent_branch ;
      children = List1.map n.branches ~f:branch_to_nhx |> List1.to_list;
    }
  | Tree.Leaf l -> {
      name = Some (sprintf "n%d" l) ;
      tags = [] ;
      parent_branch ;
      children = []
    }
and branch_to_nhx (Branch b) =
  node_to_nhx ~parent_branch:b.data b.tip

let () =
  Birth_death.age_ntaxa_simulation (Birth_death.make ~birth_rate:2. ~death_rate:1.) Gsl.Rng.(make (default ())) ~age:5. ~ntaxa:5
  |> node_to_nhx
  |> Newick.to_string
  |> print_endline

let branch_lengths t =
  Tree.prefix_traversal t
    ~init:[]
    ~branch:(fun acc bl -> bl :: acc)
    ~node:(fun acc _ -> acc)
    ~leaf:(fun acc _ -> acc)
  |> Array.of_list

(*
   Test against TESS generated by:

   library(TESS)
   sims = tess.sim.taxa.age(n=10000, 0.4, 0.3, nTaxa=10, samplingProbability=0.7, age=1, MRCA=FALSE)
   mean(sapply(sims, function(sim) mean(sim$edge.length)))
   mean(sapply(sims, function(sim) var(sim$edge.length)))
*)
let () =
  let bdp = Birth_death.make ~birth_rate:0.4 ~death_rate:0.3 in
  let rng = Gsl.Rng.(make (default ())) in
  let sims = Array.init 10_000 ~f:(fun _ ->
      let t = Birth_death.age_ntaxa_simulation bdp rng ~age:1. ~ntaxa:10 ~sampling_probability:0.7 in
      let branch_lengths = branch_lengths t in
      Gsl.Stats.(mean branch_lengths, variance branch_lengths)
    )
  in
  let means, vars = Core.Array.unzip sims in
  let mean = Gsl.Stats.mean means in
  let var = Gsl.Stats.mean vars in
  printf "\nBranch length mean: %f vs 0.2823492 (ref)\n" mean ;
  printf "Branch length variance: %f vs 0.05321786 (ref)\n" var
